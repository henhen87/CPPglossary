~Overloaded Functions^
	-	Overloaded functions can be declared with the same name and not throw an error. To 
		achieve this, pass a different set of parameters to the functions with the same 
		name.

~Preprocessor Directive^ 
	-	These are the declarations that start with the # sign such as #incluce, #define, 
		#ifndef, #endif
	-	The preprocessors read the program before it is compiled and only executes the 
		lines beginning with the # sign. Think of them as code that "sets up" your source 
		code for the compiler.
	-	It is basically importing third party code into your program
		
		Types of Preprocessors:
			- The #include directive causes the preprocessor to include the contents
			  of another file in the program. To compare, this is like "require" in 
			  NodeJS or "Import" (es6). #include <iostream> is importing code that is 
			  required if the program takes in inputs from the keyboard or outputs 
			  to the screen. (cout<< and cin>>)
			- #define pre. directive is an older style C method of creating
			  named constants. It is preferred to use the "const" modifier but
			  this directive has other uses. 
			  The difference between the named constant directive (#define) and the
			  "const" keyword is that the const keyword is a variable and has a type
			  such as an "int" and they have a specific storage location in memory.
		  	  They are like regular variables in every way except the value cannot
		  	  be changed while the program is running.
			  A name constant is defined like so:
			  #define Name_Of_Constant someValue
			  Whenever the Name_Of_Constant named constant is used in the program
			  it will be replaced by its value when it is being compiled. Also,
			  unlike the varible keyword  "const", named constants are not variables
			  but instead are text substitutions. When the program is being compiled,
			  the text name of the named constant is replaced by the value
			  
				Example:
			  		//This example calculates the area of a circle which is PI 
					//multiplied by the radius squared.
			  		
					#include <isostream>
			  		#include <cmath>   //Needed for the pow (power) function
			  		using namespace std;
			  		#define PI 3.14159
			  		
					int main()
			  		{
			  			double area, radius;
				
						cout << "This programs calculates the radius of a \n
							circle.\n";
						cout << "What is the radius of the circle?\n";
						cin >> radius;
				
						area = PI * pow(radius, 2);
						cout << "The area is " << area << endl;
						return 0;
			  		}

			- #ifndef (if not defined). This directive is known as an "include guard"
			  This will prevent the header file from accidentally being included 
			  multiple times. An example would be if the main program file includes
			  a header file and the header file also includes a second header file.
			  If the main program by chance included the same second header file defined
			  in the original/first header file, the guard will prevent it from being 
			  processed twice. 
			  It is used to determine whether or not a specific constant has already
			  been defined with a #define directive. When Someclass.h file is being 
			  compiled, the #ifndef directive will check for a constant named,
			  SOMECLASS_H. If this constant has not yet been defined, it is immediately
			  defined with the #define SOMECLASS_H. If the constant (SOMECLASS_H) has
			  already been defined (for example in the header file itself) it means
			  it is already included. This is when the guard will do its job and skip
			  everything between the #ifndef and #endif directives. The #ifndef and 
			  #endif constants should always be all capital.
				
			Example:
				#ifndef CUSTOMER_H
				#define CUSTOMER_H
				#include "stdafx.h"

				class Customer {
					private: 
						string accountID;
						string name;
					public:
						Customer();
						Customer(string, string);
						void view();
						Customer operator= (const Customer&);
				};
				#endif
			   
~using namespace std^
	- 	The "using" part means to use this or whatever is after it whenever it can. The 
		primary purpose of the "namespace" is to not have duplicate variables, functions, 
		classes etc with the same name. For example, if a program were to include 2 
		libraries that have the same function name called "print()". The namespace is 
		similar to adding a new group name to which you can add functions, and other data 
		so it can be distinguishable. 
		   
			Example:
                   		namespace ExampleOne 
		   		{
					void print()
					{
						//DO stuff
					}
	   	   		}
		 		namespace ExampleTwo 
		  		{
					void print()
					{
						//DO stuff
					}
	   	   		}	

		   With this configuartion, there will not be any naming conflicts and each of the 
		   functions can be called like so: ExampleOne::print() ExampleTwo::print();
		   Also, instead of importing everything in the STD namespace, only specific things 
	 	   in the name space can be imported like so:
		
		   	Example:
		   		using std::string;
		   		using std::cout;
		   		using std::cin;
		  		using std::endl;
		   		using std::vector;

		   std is an abbreviation for standard and is the name of the namespace. In the 
		   example, the names of the namespace were ExampleOne and ExampleTwo. In
		   "using namespace std", "std" is the name of the namespace and inside this 
		   namespace are many things already inside of it such as cout, cin etc.
		   So without having the line "using namespace std" you would have to write every-
		   thing in this name space with the scope resolution operator :: such as 
		   std::cout, std::cin etc. But if "using namespace std" is included you can just 
		   write cout << or cin >>

~Memberwise Assignment^
	-	Memberwise assignment is the assignment of data from one object to another.
		
			Example:
				SomeClass a(1, 2), b(4, 3);
				b = a; //memberwise assignment.
					
				//Note: If a data type on the right side of the assignment
				//operator is that of other than the type object on the left
				//side, in this case SomeClass, then a convert constructor
				//is called, not a copy constructor.

~Copy Constructor^
	Copy Constructor:
	-	Copy constructors are called when an object is BEING CREATED and is initialized
		with another object of the same class.
		
			Example:
				SomeClass s1(1, 2);
				SomeClass s2 = s1; //Copy constructor called

			Example 2:
				SomeClass s1(1, 2);
				SomeClass s2(2, 1);
				s2 = s1; //Copy contrcutor not called. This is just memberwise
					 //assignment

	Default Copy Constructor:
	-	If a programmer defined copy constructor is not defined, the compiler calls the 
		default copy constructor. This default copy constructor will assign the data of 
		one object to another. It is okay to rely on the default copy constructor when 
		there are no members of an object that are pointers. If a pointer is a member of 
		an object, then a programmer defined copy constructor must be used, otherwise it 
		will lead to errors such as when a destructor is called, since both pointers will 
		point to the same location in memory.

	Programmer Defined Copy Constructor:
	-	A programmer defined copy constructor is necessary when an object is being created
		and initliazed to that of a previously declared object of the same class and one
		of the member variables is a pointer.
	-	A programmer defined copy constructor must only have one parameter and must be a 
		reference to the object. 
		
			Example:
				SomeClass::SomeClass(SomeClass &obj)
				{
					someMember = obj.someMember;
				}
		
	-	Programmer defined copy constructors are also called whenever an object is being 
		passed as a parameter or when an object is a return type from a function. For this 
		reason, it is very important to have the parameter of the copy constructor to be 
		of reference and not value.

~Pointers^ 
	-	A pointer is the address of a variable in memory. A value that represents the 
		address of a memory location, or holds the address of some variable, is a pointer.
	-	A pointer variable, or known as just a pointer, is a variable that stores an 
		address. Pointers must also have a type to them and can only strictly point to the 
		same type.
				
			Example:
				int *ptr; //can only point to a variable address of type int
				int someVar = 7;
				int *ptr;
				ptr = &someVar; //It is important to have the & ampersand in front 
						//of the variable.


~Convert Constructor^
	-	Convert Constructors are called when a different type is passed as a parameter other
		than the type of the class type. 
	-	Definition from text: "A constructor that takes a single parameter of a type other 
		than its class type can be regarded as converting its parameter into an object of 
		its class."

			Example:
				class IntClass
				{
   				private:
      					int value;
   				public:
      				IntClass (int intValue) { value = intValue; } //convert constructor
				};
				
				//You could call the one-argument constructor with the code:
 
				IntClass intObject(23);
 
				//Instead, you could use the following syntax, in which an object 
				//of IntClass is initialized with a value of the data type of the 
				//convert constructor's parameter:
 
				IntClass intObject;
				intObject = 23;
 
				//This looks like assignment. However, the data type of the value 
				//on the right side of the assignment operator is different (an int)
				//than the data type of the value on the left side of the 
				//assignment operator (an instance of IntClass). yet the statement 
				//works because of the convert constructor.
 
				IntClass intObject = 23;
 
				//This looks like initialization, or use of the copy constructor. 
				//However, here too the data type of the value on the right side 
				//of the assignment operator is different (an int) than the data 
				//type of the value on the left side of the assignment operator 
				//(an instance of IntClass). yet this statement also works because 
				//of the convert constructor.
~int^
	-	int data types are for integer values. They must be whole numbers and cannot be 
		decimal. Decimals must be stored in float, double or long double. If a float
		value is initialized to an int data type, all values after decimal will be dropped.

~char^
	-	char data types only hold a single character. When initializing a char data type, 
		use single quatation marks

			Example: 
				char answer = 'y';
				string answer = "y";

	-	For strings (double quotes), there is a null terminator at the end of string (/0);
		Char only have 1 byte of memory while string can take up more

~float^
	-	floats are a data type used for when dealing with precision in numbers. When 
		working with data such as dollar amounts or things that require much precision,
		a data type which allows fractional values is most suitable.
	-	float: A regular float is single precision. Floats are stored in memory as a
		double type, but can be forced to be stored as a float by adding an "F" or "f"
		at the end.
	-	double: A double is double precision
	-	long double: A long double is more than double precision. Long double is stored 
		as a double but can be forced to be stored as a long double by adding "L" or "l"
		at the end.
	-	long numbers can be represented with "E" or 'e', which represents 10 to the power 
		of "n"
		
		Example:
			float cost = 20.45;
			float ml = 3.14159;

			//Very lengthy numbers can be shortened with the "E" or "e" syntax.
			float distance = 1.496E8 //1.496 * 10^8;
			//is equivalent to
			float distance = 149600000;
	
	-	If assigning a float to a type "int", the numbers after the decimal will be 
		dropped.
		
		Example:
			int num = 4.43; //4

~double^
	-	Double is similar to float except double is double the precision whereas float is 
		single precision.


~long double^
	-	Long double is  similar to double except it has more than double precision
